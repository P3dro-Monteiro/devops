/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a Java application
    id 'application'
}


repositories {
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // Use Apache Log4J for logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    //junit 4.12
    implementation 'junit:junit:4.12'
}
 

// Define the main class for the application
mainClassName = 'basic_demo.App'
description = "A trivial Gradle build"
version = "0.1.0"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest {
        attributes "Main-Class": "basic_demo.App"
    }

   from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}



task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59005 "
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatClientApp'

    args 'localhost', '59005'
}

/*task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on 192.168.147.5"
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatClientApp'

    args '192.168.147.5', '59005'
}*/

task runServer(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Run Server Lauched on localhost: 59005"
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatServerApp'

    args '59005'
}

task backupSourceCode(type: Copy){
    from "./src"
    into "./srcBackup"
    ext.message = "Source Code Back Up Success"
    println "Source Code Back Up Success"
}

task zipSourceCode(type: Zip){
    from "./src"
    destinationDirectory = file("./")
    archiveName = "sourceCode.zip"
    ext.message = "Source Code Has Been Zipped"
    println "Source Code Has Been Zipped"
}



